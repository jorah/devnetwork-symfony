<?php

namespace AppBundle\Repository;

use AppBundle\Model\RepositoryModel;

/**
 * CodeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CodeRepository extends RepositoryModel
{

    /**
     * 
     * @param array $criteria
     * 
     * @return QueryBuilder
     */
    public function findCodes(array $criteria)
    {
        $qb = $this->createQueryBuilder('c');

        $qb->leftJoin('c.user', 'u')->addSelect('u');
        $qb->leftJoin('c.language', 'l')->addSelect('l');
        $qb->leftJoin('c.tags', 't')->addSelect('t');
        if ($criteria['language']) {
            $qb->andWhere($qb->expr()->eq('l.name', ':language'));
            $qb->setParameter('language', $criteria['language']);
        }
        $itag = 1;
        foreach ($criteria['tags'] as $tag) {
            $qb->andWhere($qb->expr()->like('t.name', ':tag' . $itag));
            $qb->setParameter('tag' . $itag, $tag);
            $itag++;
        }
        return $qb;
    }

    /**
     * Get entity with related entities
     * 
     * @param int $id
     * 
     * @return null|QueryBuilder
     */
    public function findShow($id)
    {
        $qb = $this->createQueryBuilder('c');
        $qb
                ->leftJoin('c.user', 'u')->addSelect('u')
                ->leftJoin('c.language', 'l')->addSelect('l')
                ->leftJoin('c.tags', 't')->addSelect('t')
                ->where($qb->expr()->eq('c.id', ':id'))
                ->setParameter('id', $id)
        ;
        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * Check if a Code entity exist with a specific language
     * 
     * @param mixed $language
     * 
     * @return boolean
     */
    public function hasLanguage($language)
    {
        $qb = $this->createQueryBuilder('c');
        $qb->leftJoin('c.language', 'l')->addSelect('l');
        if (is_string($language)) {
            $exp = $qb->expr()->eq('l.name', ':lang');
        } else {
            $exp = $qb->expr()->eq('l.id', ':lang');
        }
        $qb->where($exp)->setParameter('lang', $language);
        $qb->setMaxResults(1);
        $data = $qb->getQuery()->getArrayResult();
        return empty($data) ? false : true;
    }

}
